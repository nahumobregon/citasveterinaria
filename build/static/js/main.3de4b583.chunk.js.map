{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","console","log","trim","id","uuid","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3de4b583.chunk.js","sourcesContent":["import React,{Fragment, useState} from 'react';\r\nimport uuid from 'uuid/v4'\r\nimport PropTypes from 'prop-types'\r\n\r\n//            Props crearCita\r\nconst Formulario = ({crearCita}) =>{\r\n\r\n    //Crear State de Citas\r\n    const [cita, actualizarCita] = useState({\r\n        mascota: '',\r\n        propietario: '',\r\n        fecha: '',\r\n        hora: '',\r\n        sintomas:''\r\n    });\r\n\r\n    const [error, actualizarError] = useState(false)\r\n\r\n    //Funcion que se ejecuta cada que \r\n    //el usuario escribe en el input\r\n    const actualizarState= e =>{\r\n        //console.log('escribiendo...')\r\n        actualizarCita({\r\n            ...cita,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const {mascota , propietario, fecha, hora, sintomas} = cita\r\n\r\n    //cuando el usuarip presiona enviarFormulario\r\nconst submitCita = e =>{\r\n    e.preventDefault()\r\n    console.log(mascota)\r\n    //validar\r\n    if(mascota.trim()==='' || propietario.trim()==='' \r\n    || fecha.trim()==='' || hora.trim()===''\r\n    || sintomas.trim()===''){\r\n        actualizarError(true)\r\n        return\r\n    }\r\n\r\n    actualizarError(false)\r\n\r\n    //asignar id\r\n    cita.id = uuid()\r\n    //console.log(cita)\r\n\r\n    //crear la cita\r\n    crearCita(cita)\r\n\r\n    //reiniciar el form\r\n    actualizarCita({\r\n        mascota: '',\r\n        propietario: '',\r\n        fecha: '',\r\n        hora: '',\r\n        sintomas:''    \r\n    })\r\n}\r\n\r\n    return (\r\n       <Fragment>\r\n           <h2>Crear Cita</h2>\r\n           {\r\n           error \r\n           ? \r\n           <p className=\"alerta-error\">Todos los campos son obligatorios</p>\r\n           : \r\n           null\r\n           }\r\n           <form\r\n            onSubmit={submitCita}\r\n           >\r\n               <label>Nombre Mascota</label>\r\n               <input\r\n                    type=\"text\"\r\n                    name=\"mascota\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre Mascota\"\r\n                    onChange={actualizarState}\r\n                    value={mascota}\r\n               />\r\n\r\n                <label>Nombre Dueño</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"propietario\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre Dueño\"\r\n                    onChange={actualizarState}\r\n                    value={propietario}\r\n                />\r\n\r\n                <label>Fecha</label>\r\n                <input\r\n                    type=\"date\"\r\n                    name=\"fecha\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState}\r\n                    value={fecha}\r\n                />\r\n\r\n                <label>Hora</label>\r\n                <input\r\n                    type=\"time\"\r\n                    name=\"hora\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState}\r\n                    value={hora}\r\n                />\r\n                <label>Sintomas</label>\r\n                <textarea\r\n                    type=\"tet\"\r\n                    name=\"sintomas\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState}\r\n                    value={sintomas}\r\n                ></textarea>\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"u-full-width button-primary\"\r\n                >Agregar cita</button>\r\n           </form>\r\n       </Fragment>\r\n    )\r\n}\r\n\r\nFormulario.propTypes = {\r\n    crearCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Cita = ({cita,eliminarCita}) => (\r\n    <div className=\"cita\">\r\n        <p>Mascota: <span></span> {cita.mascota} </p>\r\n        <p>Propietario: <span></span> {cita.propietario} </p>\r\n        <p>Hora: <span></span> {cita.hora} </p>\r\n        <p>Fecha: <span></span> {cita.fecha} </p>\r\n        <p>Sintomas: <span></span> {cita.sintomas} </p>\r\n        <button\r\n            className=\"button eliminar u-full-width\"\r\n            onClick={ () => eliminarCita(cita.id) }\r\n        >\r\n            Eliminar &times;\r\n        </button>\r\n    </div>\r\n)\r\n\r\nCita.propTypes = {\r\n    cita: PropTypes.object.isRequired,\r\n    eliminarCita: PropTypes.func.isRequired\r\n}\r\nexport default Cita","import React , {Fragment, useState, useEffect} from 'react';\nimport Formulario from './components/Formulario'\nimport Cita from './components/Cita'\n\nfunction App() {\n\n  //citas en localStorage\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'))\n  if(!citasIniciales){\n    citasIniciales=[]\n  }\n\n  //Arreglo de Citas\n  const [citas,guardarCitas] = useState(citasIniciales)\n\n  //use Effect para realizar ciertas operaciones cuando el state cambia\n  // se ejecuta cuando el state esta listo o sufre cambios\n  useEffect( ()=>{\n    let citasIniciales = JSON.parse(localStorage.getItem('citas'))\n    if(citasIniciales){\n      localStorage.setItem('citas',JSON.stringify(citas))\n    }else{\n      localStorage.setItem('citas',JSON.stringify([]))\n    }\n\n  }, [citas])\n  //para que use Effect no se este ejecutando cada que hay cambios\n  //se le pasa un arreglo vacio []\n  //se le puede pasar el state, ejemplo [citas] y casa que \n  // el state [citas] sufra cambios, se va a ejecutar\n\n  //Funcion que toma las citas actuales y agrega una nueva\n  const crearCita = cita =>{\n      guardarCitas([\n      ...citas,\n      cita\n    ])\n  }\n\n  //Funcion que elimina una cita por su ID\n  const eliminarCita = id => {\n    const nuevasCitas = citas.filter(cita => cita.id !== id)\n    guardarCitas(nuevasCitas)\n  }\n\n  // Mensaje Condicional\n  const titulo = citas.length === 0 ? 'No hay Citas' : 'Administra tus Citas'\n\n  return (\n    <Fragment>\n      <h1>Administrador de Pacientes</h1>\n\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n              <Formulario\n                //        {crearCita} <- es una funcion que pasa como props\n                crearCita={crearCita}\n              />\n          </div>\n          <div className=\"one-half column\">\n              <h2>{titulo}</h2>\n              {citas.map(cita=>(\n                <Cita \n                  key={cita.id}\n                  //   {cita} <- es un objeto que pasa como props\n                  cita={cita}\n                  eliminarCita={eliminarCita}\n                />\n              ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}